apply plugin: "java"

import de.undercouch.gradle.tasks.download.Download

apply plugin: 'de.undercouch.download'

sourceCompatibility = 1.8

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.1.1'
        classpath 'org.apache.httpcomponents:httpclient:4.5.2'
    }
}

task doNothing << {
    println buildDir
    def file = new File("applications/redis/install")
    println file.absolutePath
}

def rootDir = project(":").projectDir

/*-------REDIS-----------*/
task download_redis(type: Download) {
    src 'https://github.com/MSOpenTech/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.zip'
    dest new File("$rootDir/applications/redis/install", 'Redis-x64-3.2.100.zip')
    onlyIfNewer true
}

task install_redis(dependsOn: download_redis, type: Copy) {
    from zipTree(download_redis.dest)
    into "${rootDir}/applications/redis"
}

// implement something like gradle-node plugin
task start_redis(type: Exec) {
    workingDir '../applications/redis'
    commandLine 'cmd', '/c', 'redis-server'
}

task stop_redis(type: Exec) {
    workingDir '../applications/redis'
    commandLine 'cmd', '/c', 'redis-cli', 'shutdown'
}

task remove_redis << {
    new File('../applications/redis').deleteDir()
}

/*--------MONGO------------*/

// download mongo
task download_mongo(type: Download) {
    src 'https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.2.9-signed.msi'
    dest '../applications/mongo/install'
    onlyIfNewer true
}

// CANNOT INSTALL FOR NOW
// install mongo
// no idea how to uninstall (though it seems possible to msiexec /unistall
task install_mongo(dependsOn: download_mongo, type: Exec) {
    workingDir '../applications/mongo/install'
    commandLine 'cmd', 'msiexec','/i', "mongodb-win32-x86_64-2008plus-ssl-3.2.9-signed.msi", 'TARGETDIR=../', 'ADDLOCAL=\"all\"'
}

// Solve issue with previous tasks
task setup_mongo(dependsOn: install_mongo, type: Exec) {
    /*def config_file = new File('../applications/mongo/mongodb.config')
    config_file << "dbpath=../data/db"*/
}


task start_mongo(type: Exec) {
    workingDir '../applications/mongo'
    commandLine 'cmd', '/c', 'mongod', '--config', 'mongodb.config'
}

// find proper procedure
task stop_mongo(type: Exec) {
    workingDir '../applications/mongo/server/3.2/bin'
    commandLine 'cmd', '/c', 'mongod', 'stop'
}

task remove_mongo << {
    new File('../applications/mongo').deleteDir()
}

project.ext.mainClassName = "com.lapots.game.journey.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + '-desktop'
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}
