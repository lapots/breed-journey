IMS - internal messaging system (v1.0)

    The basic idea behind IMS is to provide an ability
for application objects to communicate with each other
using messages, instead of direct method calls. 

The pros are
    -   unification - accessing the fields, setting data and etc. is all the same
    -   higher flexibility as we are not bound to object expectations regarding result
    -   ability to separate objects into groups with different addresses, combining
        groups and etc.
The cons are
    -   performance drop, due to additional actions

    In order to send and receive message object should be identifiable in IMS. That can
be achieved by providing special URL to every object. There it is called GRL - global
resource locator. GRL is an address in format a:b:c, where every element corresponds
to the router. Example

    core:managed:componentStorage

Messages in IMS are called GRL messages - they are special objects with GRLMessage type.
Its structure looks like this

    method:headers:multipart

Where

    method      -   type of method: POST, PUT, GET. Has type of GRLMethod.
    headers     -   map of headers. For example ["contentType" : "object"]
                    Supported headers:
                          header  ================  required
                             destination   |      true
                             sender        |      true
                             receiver      |      true
                             contentType   |      false
                             sendTime      |      false
                             receiveTime   |      false
                             brokerTime    |      false
                          ===================================
    multipart   -   object content. Can be any type - JSON, binary etc. Should
                    implement IGRLMultipart interface.

    Messages consumed and produced by objects. IMS itself operates with special packages.
Package consists of GRL and GRLMessage. In IMS it has GRLPackage type. When object send message
IMS wraps it into GRLPackage. Additionally IMS checks that message has all the required headers.

    Sending messages is not happen directly. Before message reach its destination it should pass routers.
Router is a special object - instance of interface IRouter - and responsible for delegating message
to channels and destinations.

    Routers keep channels - objects that can consume dsl with certain GRL methods. Basically there are
three types of channels POST, PUT, GET - corresponding to GRLMethod. Channels should implement IChannel interface.

    Upon receiving object, consumer should verify message consistency - whether it arrived to the proper object.
============================================================================================
    IMS provides special object - IMSPlatform - which is a wrapper of core object of IMS - IMSContext - and used
for providing access to facilities for external systems. It allows to register consumers & producers, routers,
transfer messages and stop the application.

    IMSContext contains all registered objects and routes in IMS. It can be responsible for object transferring too,
as it has synchronized method for transfer. IMSPlatform synchronize threads itself and uses not synchronized
IMSContext transfer.
==============================================================================================
Depending on the case IMS might throw two types of exceptions
    -   IMSException
            IMS throws that exception if there are issues with IMS operations
    -   GRLException
            IMS throws that exception if there are issues with GRL messages
===============================================================================================
API
    AbstractIdentifiable
    IChannel
    IEmptyObject
    IGRLMultipart
    IIMSConsumer
    IIMSIdentifiable
    IIMSProducer
    IRouter
    GRLMessageDSL
    GRLMessage
    GRLMethod
    GRLPackage
    IMSObject
    IMSContext
    GRLException
    IMSException
    IMSContext
    IMSPlatform
================================================================================================
>> FLOW >>
    1. create wrapper for domain object by implementing AbstractIdentifiable<T> class
    2. register object in IMS using IMSPlatform.registerObject(wrapper)
    3. create IRouter implementation and register IChannel implementations for it
    4. register router in IMS using IMSPlatform.registerRouter(router)
    5. transfer objects from AbstractIndentifiable object implemenation using IMSPlatform.transfer
=============================================================================================== v1.0 end
v1.5 expectations
    - persistence
v2.0 expectations
    -   annotations @IMSObject