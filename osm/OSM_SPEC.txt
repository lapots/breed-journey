OSM - object state machine v1.0 (technical name)

    The basic idea behind OSM is to provide an ability
for objects to have and change state.

    State machine is a special model which operates with object. It consists
of two main components
    -   state, object status or number of parameters with certain values
    -   transition, special function allowing to change object state
That's all from the theory olol

What is state?
Assuming we've got object

    class StatefulObject {
        def param1
        def param2
    }

    Having state means that param1 has a valueA and param2 has a valueB. For example

    state {
        object StatefulObject
        param1  valueA
        param2  valueB
    }

That IS the state!

What is transition?
Assuming we've got a previously mentioned state

    state {
        object  StatefulObject
        param1  valueA
        param2  valueB
    }

    Transition is an special object - conditional function - that transform
state into another state. For example

    transition {
        param1  valueC
        param2  valueB - valueD
    }

    It is similar to [state] but unlike it, transition is not belong to any
specific object. Though in our example we assuming that state on which
we want to apply transition has param1 & param2.

So what will happen if we apply that transition to state?

    state {                             state {
        object  StatefulObject              object  StatefulObject
        param1  valueA           =>         param1  valueC
        param2  valueB                      param2  valueZ
    }                                   }

    As transition did not have any specific calculations for param1 it simply
changes its value. But as for param2 it performed some operations the result
became valueB - valueD = valueZ. (Actually it is interesting that we can directly pass
object instance for states due to object reference being the same everywhere as long
as we do not allocate for it again)

    The number of states can be either finite or infinite. Generally and the most commonly
used is finite state machine. Basically we can reproduce it as an array of states (though
usually it is a graph but we can imitate it with array anyway).

    Array[State]

    And then we change states by moving current state index in the array either forward or backward.
As we know all the states there is no need to make transition functions. Example of finite state
machine might the seasons. Winter, Spring, Summer, Autumn - we can switch weather state and its
parameter. With simple approach - when we set the values of seasons (like temperature, humidity)
we may not create transition functions. For example

    SpringState {
        temperature 15
        humidity 60
    }

    However sometimes we might want more complex weather transitions - then we can change state to
for example Spring and additionally apply transition function. That is the most complex approach.

    Sometimes we might not know states but know only transition functions. That way we can reproduce
for example weather changes on daily basis. We know that every day is slightly warmer that previous
so we can apply transition function to increase corresponding values until we reach milestone where
we have to switch weather season. Again all that transitions we can represent as array

    Array[Transition]

Unlike [state] approach, we can't simple rollback to previous state - we have to revert our transition
which is more difficult then just switch state because we might have transition as a complex function.
So we should support transition rollback separately. In simple cases it will be easier. For example

    ToSpringTransition {            =>          RevertToSpringTransition {
        temperature (prev + 0.1)                      temperature (current -0.1)
        humidity    (prev / 2 + 1)                    humidity ((curr - 1) * 2)
    }                                           }

Unlike states we have to calculate expressions.
===============================================================
OSM does not provide facilities for state machine out-of-box. It only provides domains and context,
where states are stored. So the user should implement state machine himself.

For domain objects OSM provides ObjectState and Transition.

    -   ObjectState is the object, that stores references to wrapped non-OSM object and a map, with values
        for the fields for corresponding state. For example OSM representation for SimpleClass
            class SimpleClass {
                def name
            }
        would look like this
            class ObjectState {
                objRef = simpleClassInstance
                stateMap = ["name", "basic name"]
            }
        There we keep field name and value in stateMap. And when we mirror that map into the object
        then [simpleClassInstance] will have value [basic name] in its field [name]

    -   Transition is the object that stores special entities - transformations for the fields. Basic
        structure looks similar to ObjectState but it does not store the reference for object instance.
        For previously mentioned SimpleClass transition may look like this
            class Transition {
                transformations = ["name", NameTransformation]
            }
        where NameTransformation is the instance of ITransformation - interface with a sole method
        [transform] that looks like this
            transform(input, params) : output
        Input is the input object field, params - some misc parameters for the transformation and output
        is the transformed field.

OSM provides OSMPlatform which allows to register object in OSM. It supports several methods which
allow to register object with predefined state keys, with initial or without initial object state.

OSM allows to read and write object state - it called [mirroring]. When user provide object with predefined
state field and does not provide initial state, then OSM mirrors current object state fields values as
a state. It's called [in-mirroring]. When use has a custom state and want to write it to object, it can be
done using [out-mirroring]. Mirroring is done via reflection.

If something happen during OSM runtime, OSM will throw OSMException.
In custom OSM implementation it is preferable to extend OSMExtension or just throw it.
===============================================================
API
    ITransformation
    ObjectState
    Transition
    OSMException
    OSMContext
    OSMPlatform
===============================================================
>>> FLOW >>>
    1. create wrapper over domain object by implementing AbstractStatefulObject[T]
    2. provide for that wrapper array of states and array of transition functions.
    3. register object in OSM using OSMPlatform.registerObject
    4. change object states using OSMPlatform.nextState or manualNextState, with a custom
        transition function
================================================================ v 1.0
v1.5 expectations
    -   ability to generate and read [state transition table]
v2.0 expectations
    -   custom rule engine


